services:

# testing publisher service with customizable event generation rates
  publisher:
    build:
      context: ./services/publisher-testing
    environment:
      - EVENT_ENDPOINT=http://gateway:3000/webhook
      - MIN_EVENTS_PER_SECOND=10
      - MAX_EVENTS_PER_SECOND=100
    restart: unless-stopped
    profiles:
      - development

  publisher-prod:
    image: andriiuni/events
    platform: linux/arm64/v8
    environment:
      - EVENT_ENDPOINT=http://gateway:3000/webhook
    restart: unless-stopped
    profiles:
      - staging
      - production

  nats:
    image: nats:latest
    command: ["--js", "--config", "/etc/nats/nats-server.conf"]
    ports:
      - "4222:4222"
      - "8222:8222"
    volumes:
      - ./nats-server.conf:/etc/nats/nats-server.conf
    healthcheck:
      test: ["CMD", "nats-server", "--help"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    profiles:
      - development
      - staging
      - production
    depends_on:
      publisher:
        condition: service_started
        required: false
      publisher-prod:
        condition: service_started
        required: false

  gateway:
    build:
      context: ./services/gateway
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NATS_URL=nats://nats:4222
    depends_on:
      nats:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  fb-collector:
    build:
      context: ./services/fb-collector
      dockerfile: Dockerfile
    ports:
      - "3010:3010"
    environment:
      - NATS_URL=nats://nats:4222
      - DATABASE_URL=postgresql://postgres:postgres@postgres-fb:5432/events?schema=public
      - PORT=3010
    depends_on:
      nats:
        condition: service_healthy
      postgres-fb:
        condition: service_healthy

  ttk-collector:
    build:
      context: ./services/ttk-collector
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - NATS_URL=nats://nats:4222
      - DATABASE_URL=postgresql://postgres:postgres@postgres-ttk:5432/events
    depends_on:
      nats:
        condition: service_healthy
      postgres-ttk:
        condition: service_healthy

  postgres-fb:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: events
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5433:5432"
    volumes:
      - postgres_fb_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    command: postgres -c max_connections=100 -c shared_buffers=256MB

  postgres-ttk:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: events
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5434:5432"
    volumes:
      - postgres_ttk_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    command: postgres -c max_connections=100 -c shared_buffers=256MB 

  reporter:
    build:
      context: ./services/reporter
      dockerfile: Dockerfile
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL_FB=postgresql://postgres:postgres@postgres-fb:5432/events?schema=public
      - DATABASE_URL_TTK=postgresql://postgres:postgres@postgres-ttk:5432/events?schema=public
    depends_on:
      postgres-fb:
        condition: service_healthy
      postgres-ttk:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3002:3000"
    volumes:
      # - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      # - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      # - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true # Example: Enable anonymous access
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    restart: unless-stopped

volumes:
  postgres_fb_data:
    name: event-platform-postgres-fb-data
  postgres_ttk_data:
    name: event-platform-postgres-ttk-data
  grafana-data: