services:

  publisher:
    build:
      context: ./services/publisher-testing
    environment:
      - EVENT_ENDPOINT=http://gateway:3000/webhook
      - MIN_EVENTS_PER_SECOND=10
      - MAX_EVENTS_PER_SECOND=100
    restart: unless-stopped

# Old publisher service (commented out)
# publisher:
#   image: andriiuni/events
#   platform: linux/arm64/v8
#   environment:
#     - EVENT_ENDPOINT=http://gateway:3000/webhook
#   restart: unless-stopped

# New publisher service from publisher-testing

  nats:
    image: nats:latest
    command: ["--js", "--config", "/etc/nats/nats-server.conf"]
    ports:
      - "4222:4222"
      - "8222:8222"
    volumes:
      - ./nats-server.conf:/etc/nats/nats-server.conf
    healthcheck:
      test: ["CMD", "nats-server", "--help"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    depends_on:
      publisher:
        condition: service_started

  gateway:
    build:
      context: ./services/gateway
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NATS_URL=nats://nats:4222
    depends_on:
      nats:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  fb-collector:
    build:
      context: ./services/fb-collector
      dockerfile: Dockerfile
    environment:
      - NATS_URL=nats://nats:4222
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/events?schema=public
    depends_on:
      nats:
        condition: service_healthy
      postgres:
        condition: service_healthy

#   ttk-collector:
#     build:
#       context: ./services/ttk-collector
#       dockerfile: Dockerfile
#     environment:
#       - NODE_ENV=development
#       - NATS_URL=nats://nats:4222
#       - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/events
#     depends_on:
#       nats:
#         condition: service_healthy
#       postgres:
#         condition: service_healthy
#     healthcheck:
#       test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
#       interval: 30s
#       timeout: 10s
#       retries: 3

#   reporter:
#     build:
#       context: ./services/reporter
#       dockerfile: Dockerfile
#     ports:
#       - "3001:3000"
#     environment:
#       - NODE_ENV=development
#       - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/events
#     depends_on:
#       postgres:
#         condition: service_healthy
#     healthcheck:
#       test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
#       interval: 30s
#       timeout: 10s
#       retries: 3

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: events
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

#   prometheus:
#     image: prom/prometheus:latest
#     volumes:
#       - ./prometheus:/etc/prometheus
#       - prometheus_data:/prometheus
#     ports:
#       - "9090:9090"
#     command:
#       - '--config.file=/etc/prometheus/prometheus.yml'
#       - '--storage.tsdb.path=/prometheus'
#       - '--web.console.libraries=/usr/share/prometheus/console_libraries'
#       - '--web.console.templates=/usr/share/prometheus/consoles'

#   grafana:
#     image: grafana/grafana:latest
#     volumes:
#       - grafana_data:/var/lib/grafana
#     ports:
#       - "3002:3000"
#     depends_on:
#       - prometheus

volumes:
  postgres_data:
#   prometheus_data:
#   grafana_data: 